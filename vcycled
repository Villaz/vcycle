#!/usr/bin/python
#
# vcycled - VM lifecycle manager daemon for OpenStack etc
#
#  Andrew McNab, University of Manchester.
#  Copyright (c) 2013-4. All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    o Redistributions of source code must retain the above
#      copyright notice, this list of conditions and the following
#      disclaimer. 
#    o Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials
#      provided with the distribution. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
#  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

import uuid
import sys
import getpass
import os
import tempfile
import random
import time
import shutil
import calendar

from vcycleOpenstack import vcycleOpenstack
from vcycleOcci import vcycleOcci

import VCYCLE

sleepSeconds      = 60
creationsPerCycle = 5

#
# PROGRAM MAIN
#

if __name__ == '__main__':
  
  if (os.fork() != 0):
    sys.exit() # first parent

  else:
    os.chdir("/")
    os.setsid()
    os.umask(0) 

    if os.fork() != 0:
      sys.exit() # second parent

    else:

      try:
        f = open('/var/run/vcycled.pid', 'w')
        f.write(str(os.getpid()) + '\n')
        f.close()
      except:
        print 'Failed to create /var/run/vcycled.pid - exiting'
        sys.exit(1)

      # Close stdin now
      si = file('/dev/null', 'r')
      os.dup2(si.fileno(), sys.stdin.fileno())
  
      while True:

        # Close and reopen stdout->log file, in case of logrotate
        try:
          close(so)
        except:
          pass

        so = file('/var/log/vcycled', 'a+')
        os.dup2(so.fileno(), sys.stdout.fileno())
          
        # Close and reopen stderr->log file, in case of logrotate
        try:
          close(se)
        except:
          pass

        se = file('/var/log/vcycled', 'a+', 0)     
        os.dup2(se.fileno(), sys.stderr.fileno())

        try:
          pf = open('/var/run/vcycled.pid', 'r')
          pid = int(pf.read().strip())
          pf.close()
       
          if pid != os.getpid():
            print 'new /var/run/vcycled.pid - exiting'
            break
                
        except:
          print 'no /var/run/vcycled.pid - exiting'
          break

        VCYCLE.logLine('=============== Start cycle ===============')

        VCYCLE.logLine('readConf errors: ' + str(VCYCLE.readConf()))
        
        for tenancyName, tenancy in VCYCLE.tenancies.iteritems():
           if tenancy['type'] == 'openstack':
              vOpen = vcycleOpenstack()
           else:
              vOpen = vcycleOcci()
           vOpen.oneCycle(tenancyName, tenancy)
          
#        cleanupDirectories()

        VCYCLE.logLine('================ End cycle ================')

        # Flush logging to the filesystem 
        sys.stdout.flush()
        sys.stderr.flush()

        time.sleep(sleepSeconds)

      sys.exit(0) # if we break out of the while loop then we exit

